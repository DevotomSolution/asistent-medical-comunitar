<?php

declare(strict_types=1);

namespace App\Models\Vulnerability;

use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Str;

class Vulnerability extends Model
{
    public $timestamps = false;

    public $incrementing = false;

    protected $keyType = 'string';

    public function category(): BelongsTo
    {
        return $this->belongsTo(VulnerabilityCategory::class);
    }

    public function scopeInCategory(Builder $query, string $category_id): Builder
    {
        return $query->where('category_id', $category_id);
    }

    public function getColorAttribute(): string
    {
        $colors = collect();

        if (Str::endsWith($this->id, [97, 98, 99])) {
            $colors->push('bg-blue-100');
        } else {
            $colors->push('bg-warning-200');
        }

        if ($this->category->isSubcategory()) {
            $colors->push('bg-opacity-25 hover:bg-opacity-75');
        } else {
            $colors->push('bg-opacity-75 hover:bg-opacity-100');
        }

        return $colors->join(' ');
    }

    public static function cachedList(): Collection
    {
        return Cache::remember('vulnerabilities', MINUTE_IN_SECONDS, function () {
            return static::query()
                ->with('category')
                ->get()
                ->keyBy('id');
        });
    }

    public static function allAsOptions(): Collection
    {
        return static::cachedList()
            ->groupBy('category_id')
            ->map->pluck('name', 'id');
    }

    /**
     * Determine if $code matches known pregnancy vulnerabilities.
     */
    public static function isPregnancy(?string $code = null): bool
    {
        return \in_array($code, ['VGR_01', 'VGR_04']);
    }

    /**
     * Determine if $code matches known disability vulnerabilities.
     */
    public static function isDisability(?string $code = null): bool
    {
        return \in_array($code, ['VDH_01', 'VDH_02']);
    }
}
