<?php

declare(strict_types=1);

namespace App\Forms\Components;

use Filament\Forms\Components\Component;
use Filament\Forms\Components\Concerns;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;

class VulnerabilityChips extends Component
{
    use Concerns\HasHelperText;
    use Concerns\HasHint;
    use Concerns\HasName;

    protected string $view = 'forms.components.vulnerability-chips';

    final public function __construct(string $name)
    {
        $this->name($name);
        $this->statePath($name);
    }

    public static function make(string $name): static
    {
        $static = app(static::class, ['name' => $name]);
        $static->configure();

        return $static;
    }

    public function getChips(): Collection
    {
        return collect($this->getRecord()?->{$this->getName()})
            ->map(fn ($vulnerability) => [
                'color' => method_exists($vulnerability, 'color') ? $vulnerability->color() : null,
                'label' => method_exists($vulnerability, 'label') ? $vulnerability->label() : null,
                'content' => method_exists($vulnerability, 'description') ? $vulnerability->description() : null,
            ]);
    }

    public function getFallback(): string | Htmlable | null
    {
        return Str::of(__('catagraphy.vulnerability.none', [
            'vulnerability' => Str::lower($this->getLabel()),
        ]))
            ->wrap('<p class="text-sm italic">', '</p>')
            ->toHtmlString();
    }
}
